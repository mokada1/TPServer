// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TP_H_
#define FLATBUFFERS_GENERATED_TP_H_

#include "flatbuffers/flatbuffers.h"

struct Vec3;

struct REQ_LOGIN;
struct REQ_LOGINBuilder;

struct RES_LOGIN;
struct RES_LOGINBuilder;

struct REQ_MOVE;
struct REQ_MOVEBuilder;

struct TP_ERROR;
struct TP_ERRORBuilder;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vec3 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  Vec3() {
    memset(static_cast<void *>(this), 0, sizeof(Vec3));
  }
  Vec3(float _x, float _y, float _z)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        z_(flatbuffers::EndianScalar(_z)) {
  }
  float x() const {
    return flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(Vec3, 12);

struct REQ_LOGIN FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef REQ_LOGINBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USERID = 4,
    VT_PASSWORD = 6
  };
  const flatbuffers::String *UserId() const {
    return GetPointer<const flatbuffers::String *>(VT_USERID);
  }
  const flatbuffers::String *Password() const {
    return GetPointer<const flatbuffers::String *>(VT_PASSWORD);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USERID) &&
           verifier.VerifyString(UserId()) &&
           VerifyOffset(verifier, VT_PASSWORD) &&
           verifier.VerifyString(Password()) &&
           verifier.EndTable();
  }
};

struct REQ_LOGINBuilder {
  typedef REQ_LOGIN Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_UserId(flatbuffers::Offset<flatbuffers::String> UserId) {
    fbb_.AddOffset(REQ_LOGIN::VT_USERID, UserId);
  }
  void add_Password(flatbuffers::Offset<flatbuffers::String> Password) {
    fbb_.AddOffset(REQ_LOGIN::VT_PASSWORD, Password);
  }
  explicit REQ_LOGINBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  REQ_LOGINBuilder &operator=(const REQ_LOGINBuilder &);
  flatbuffers::Offset<REQ_LOGIN> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<REQ_LOGIN>(end);
    return o;
  }
};

inline flatbuffers::Offset<REQ_LOGIN> CreateREQ_LOGIN(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> UserId = 0,
    flatbuffers::Offset<flatbuffers::String> Password = 0) {
  REQ_LOGINBuilder builder_(_fbb);
  builder_.add_Password(Password);
  builder_.add_UserId(UserId);
  return builder_.Finish();
}

inline flatbuffers::Offset<REQ_LOGIN> CreateREQ_LOGINDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *UserId = nullptr,
    const char *Password = nullptr) {
  auto UserId__ = UserId ? _fbb.CreateString(UserId) : 0;
  auto Password__ = Password ? _fbb.CreateString(Password) : 0;
  return CreateREQ_LOGIN(
      _fbb,
      UserId__,
      Password__);
}

struct RES_LOGIN FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RES_LOGINBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CHARACTERID = 4,
    VT_POS = 6
  };
  int32_t CharacterId() const {
    return GetField<int32_t>(VT_CHARACTERID, 0);
  }
  const Vec3 *Pos() const {
    return GetStruct<const Vec3 *>(VT_POS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_CHARACTERID) &&
           VerifyField<Vec3>(verifier, VT_POS) &&
           verifier.EndTable();
  }
};

struct RES_LOGINBuilder {
  typedef RES_LOGIN Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_CharacterId(int32_t CharacterId) {
    fbb_.AddElement<int32_t>(RES_LOGIN::VT_CHARACTERID, CharacterId, 0);
  }
  void add_Pos(const Vec3 *Pos) {
    fbb_.AddStruct(RES_LOGIN::VT_POS, Pos);
  }
  explicit RES_LOGINBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RES_LOGINBuilder &operator=(const RES_LOGINBuilder &);
  flatbuffers::Offset<RES_LOGIN> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RES_LOGIN>(end);
    return o;
  }
};

inline flatbuffers::Offset<RES_LOGIN> CreateRES_LOGIN(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t CharacterId = 0,
    const Vec3 *Pos = 0) {
  RES_LOGINBuilder builder_(_fbb);
  builder_.add_Pos(Pos);
  builder_.add_CharacterId(CharacterId);
  return builder_.Finish();
}

struct REQ_MOVE FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef REQ_MOVEBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CHARACTERID = 4,
    VT_POS = 6
  };
  int32_t CharacterId() const {
    return GetField<int32_t>(VT_CHARACTERID, 0);
  }
  const Vec3 *Pos() const {
    return GetStruct<const Vec3 *>(VT_POS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_CHARACTERID) &&
           VerifyField<Vec3>(verifier, VT_POS) &&
           verifier.EndTable();
  }
};

struct REQ_MOVEBuilder {
  typedef REQ_MOVE Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_CharacterId(int32_t CharacterId) {
    fbb_.AddElement<int32_t>(REQ_MOVE::VT_CHARACTERID, CharacterId, 0);
  }
  void add_Pos(const Vec3 *Pos) {
    fbb_.AddStruct(REQ_MOVE::VT_POS, Pos);
  }
  explicit REQ_MOVEBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  REQ_MOVEBuilder &operator=(const REQ_MOVEBuilder &);
  flatbuffers::Offset<REQ_MOVE> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<REQ_MOVE>(end);
    return o;
  }
};

inline flatbuffers::Offset<REQ_MOVE> CreateREQ_MOVE(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t CharacterId = 0,
    const Vec3 *Pos = 0) {
  REQ_MOVEBuilder builder_(_fbb);
  builder_.add_Pos(Pos);
  builder_.add_CharacterId(CharacterId);
  return builder_.Finish();
}

struct TP_ERROR FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TP_ERRORBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MESSAGE = 4
  };
  const flatbuffers::String *Message() const {
    return GetPointer<const flatbuffers::String *>(VT_MESSAGE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyString(Message()) &&
           verifier.EndTable();
  }
};

struct TP_ERRORBuilder {
  typedef TP_ERROR Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_Message(flatbuffers::Offset<flatbuffers::String> Message) {
    fbb_.AddOffset(TP_ERROR::VT_MESSAGE, Message);
  }
  explicit TP_ERRORBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TP_ERRORBuilder &operator=(const TP_ERRORBuilder &);
  flatbuffers::Offset<TP_ERROR> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TP_ERROR>(end);
    return o;
  }
};

inline flatbuffers::Offset<TP_ERROR> CreateTP_ERROR(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> Message = 0) {
  TP_ERRORBuilder builder_(_fbb);
  builder_.add_Message(Message);
  return builder_.Finish();
}

inline flatbuffers::Offset<TP_ERROR> CreateTP_ERRORDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *Message = nullptr) {
  auto Message__ = Message ? _fbb.CreateString(Message) : 0;
  return CreateTP_ERROR(
      _fbb,
      Message__);
}

#endif  // FLATBUFFERS_GENERATED_TP_H_
